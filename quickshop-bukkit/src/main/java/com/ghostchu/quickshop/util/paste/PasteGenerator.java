package com.ghostchu.quickshop.util.paste;

import com.ghostchu.quickshop.QuickShop;
import com.ghostchu.quickshop.util.MsgUtil;
import com.ghostchu.quickshop.util.paste.item.CachePerformanceItem;
import com.ghostchu.quickshop.util.paste.item.ChatProcessorInfoItem;
import com.ghostchu.quickshop.util.paste.item.ConfigCollectorItem;
import com.ghostchu.quickshop.util.paste.item.CronLogsItem;
import com.ghostchu.quickshop.util.paste.item.DatabaseInfoItem;
import com.ghostchu.quickshop.util.paste.item.DebugLogsItem;
import com.ghostchu.quickshop.util.paste.item.DisplaySystemItem;
import com.ghostchu.quickshop.util.paste.item.HeaderItem;
import com.ghostchu.quickshop.util.paste.item.MiscUtilItem;
import com.ghostchu.quickshop.util.paste.item.PasteItem;
import com.ghostchu.quickshop.util.paste.item.PerformanceLogsItem;
import com.ghostchu.quickshop.util.paste.item.PermissionLogsItem;
import com.ghostchu.quickshop.util.paste.item.PluginsInfoItem;
import com.ghostchu.quickshop.util.paste.item.PrivacyLogsItem;
import com.ghostchu.quickshop.util.paste.item.ReplaceableModulesItem;
import com.ghostchu.quickshop.util.paste.item.ServerInfoItem;
import com.ghostchu.quickshop.util.paste.item.ShopsInfoItem;
import com.ghostchu.quickshop.util.paste.item.SystemInfoItem;
import com.ghostchu.quickshop.util.paste.item.TimingsLogsItem;
import com.ghostchu.quickshop.util.paste.item.TransactionLogsItem;
import lombok.Getter;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class PasteGenerator {
    private static final String DOCUMENT_HEADER = """
            <!DOCTYPE html>
            <html lang="en">
                <head>
                    <meta charset="utf-8">
                    <title>{title}</title>
                    <style>
                        {inline_style}
                    </style>
                </head>
                <body style = "max-width: 70em !important;">
                <main>
            """;
    private static final String DOCUMENT_FOOTER = """
                </main>
                <br />
                <br />
                </body>
                <footer>
                   <p>
                     Generated by {product} at {time}. <br />
                     Paste creator: {pastecreator}.<br />
                     Built with <a href="https://github.com/oxalorg/sakura">Sakura.css</a>. <br />
                     Pastebin providers: <a href="https://bytebin.lucko.me/">Lucko Bytebin</a> [<a href="https://github.com/sponsors/lucko">Support lucko</a>] <br />
                     Made with sugar and cat paws &lt;3.
                   </p>
                </footer>
            </html>
            """;


    private static final String INLINE_STYLE = """
            /* Sakura.css v1.3.0
             * ================
             * Minimal css theme.
             * Project: https://github.com/oxalorg/sakura/
             */
            /* Body */
            html {
              font-size: 62.5%;
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif; }
                        
            body {
              font-size: 1.8rem;
              line-height: 1.618;
              max-width: 38em;
              margin: auto;
              color: #4a4a4a;
              background-color: #f9f9f9;
              padding: 13px; }
                        
            @media (max-width: 684px) {
              body {
                font-size: 1.53rem; } }
                        
            @media (max-width: 382px) {
              body {
                font-size: 1.35rem; } }
                        
            h1, h2, h3, h4, h5, h6 {
              line-height: 1.1;
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
              font-weight: 700;
              margin-top: 3rem;
              margin-bottom: 1.5rem;
              overflow-wrap: break-word;
              word-wrap: break-word;
              -ms-word-break: break-all;
              word-break: break-word;
              -ms-hyphens: auto;
              -moz-hyphens: auto;
              -webkit-hyphens: auto;
              hyphens: auto; }
                        
            h1 {
              font-size: 2.35em; }
                        
            h2 {
              font-size: 2.00em; }
                        
            h3 {
              font-size: 1.75em; }
                        
            h4 {
              font-size: 1.5em; }
                        
            h5 {
              font-size: 1.25em; }
                        
            h6 {
              font-size: 1em; }
                        
            p {
              margin-top: 0px;
              margin-bottom: 2.5rem; }
                        
            small, sub, sup {
              font-size: 75%; }
                        
            hr {
              border-color: #2c8898; }
                        
            a {
              text-decoration: none;
              color: #2c8898; }
              a:hover {
                color: #982c61;
                border-bottom: 2px solid #4a4a4a; }
                        
            ul {
              padding-left: 1.4em;
              margin-top: 0px;
              margin-bottom: 2.5rem; }
                        
            li {
              margin-bottom: 0.4em; }
                        
            blockquote {
              margin-left: 0px;
              margin-right: 0px;
              padding-left: 1em;
              padding-top: 0.8em;
              padding-bottom: 0.8em;
              padding-right: 0.8em;
              border-left: 5px solid #2c8898;
              margin-bottom: 2.5rem;
              background-color: #f1f1f1; }
                        
            blockquote p {
              margin-bottom: 0; }
                        
            img {
              height: auto;
              max-width: 100%;
              margin-top: 0px;
              margin-bottom: 2.5rem; }
                        
            /* Pre and Code */
            pre {
              background-color: #f1f1f1;
              display: block;
              padding: 1em;
              overflow-x: auto;
              margin-top: 0px;
              margin-bottom: 2.5rem; }
                        
            code {
              font-size: 0.9em;
              padding: 0 0.5em;
              background-color: #f1f1f1;
              white-space: pre-wrap; }
                        
            pre > code {
              padding: 0;
              background-color: transparent;
              white-space: pre; }
                        
            /* Tables */
            table {
              text-align: justify;
              width: 100%;
              border-collapse: collapse;
              word-wrap:break-word;
              word-break:break-all;}
                        
            td, th {
              padding: 0.5em;
              border-bottom: 1px solid #f1f1f1;
              word-wrap:break-word;
              word-break:break-all;}
                        
            /* Buttons, forms and input */
            input, textarea {
              border: 1px solid #4a4a4a; }
              input:focus, textarea:focus {
                border: 1px solid #2c8898; }
                        
            textarea {
              width: 100%; }
                        
            .button, button, input[type="submit"], input[type="reset"], input[type="button"] {
              display: inline-block;
              padding: 5px 10px;
              text-align: center;
              text-decoration: none;
              white-space: nowrap;
              background-color: #2c8898;
              color: #f9f9f9;
              border-radius: 1px;
              border: 1px solid #2c8898;
              cursor: pointer;
              box-sizing: border-box; }
              .button[disabled], button[disabled], input[type="submit"][disabled], input[type="reset"][disabled], input[type="button"][disabled] {
                cursor: default;
                opacity: .5; }
              .button:focus:enabled, .button:hover:enabled, button:focus:enabled, button:hover:enabled, input[type="submit"]:focus:enabled, input[type="submit"]:hover:enabled, input[type="reset"]:focus:enabled, input[type="reset"]:hover:enabled, input[type="button"]:focus:enabled, input[type="button"]:hover:enabled {
                background-color: #982c61;
                border-color: #982c61;
                color: #f9f9f9;
                outline: 0; }
                        
            textarea, select, input[type] {
              color: #4a4a4a;
              padding: 6px 10px;
              /* The 6px vertically centers text on FF, ignored by Webkit */
              margin-bottom: 10px;
              background-color: #f1f1f1;
              border: 1px solid #f1f1f1;
              border-radius: 4px;
              box-shadow: none;
              box-sizing: border-box; }
              textarea:focus, select:focus, input[type]:focus {
                border: 1px solid #2c8898;
                outline: 0; }
                        
            input[type="checkbox"]:focus {
              outline: 1px dotted #2c8898; }
                        
            label, legend, fieldset {
              display: block;
              margin-bottom: .5rem;
              font-weight: 600; }
            """;
    @Getter
    private final List<PasteItem> pasteItems = new LinkedList<>();
    private final long timestamp = System.currentTimeMillis();
    private final CommandSender sender;

    public PasteGenerator(@Nullable CommandSender sender) {
        this.sender = sender;
        add(new HeaderItem(System.currentTimeMillis(), Map.of()));
        add(new ServerInfoItem());
        add(new SystemInfoItem());
        add(new DatabaseInfoItem());
        add(new ChatProcessorInfoItem());
        add(new ShopsInfoItem());
        add(new ReplaceableModulesItem());
        add(new PluginsInfoItem());
        add(new CachePerformanceItem());
        add(new ConfigCollectorItem());
        add(new DebugLogsItem());
        add(new TransactionLogsItem());
        add(new PermissionLogsItem());
        add(new TimingsLogsItem());
        add(new CronLogsItem());
        add(new PerformanceLogsItem());
        add(new PrivacyLogsItem());
        add(new MiscUtilItem());
        add(new DisplaySystemItem());
        PasteManager pasteManager = QuickShop.getInstance().getPasteManager();
        if (pasteManager != null) {
            pasteManager.getAllRegistered().forEach(this::add);
        }
    }

    public void add(@NotNull PasteItem pasteItem) {
        pasteItems.add(pasteItem);
    }

    @NotNull
    public String render() {
        StringBuilder builder = new StringBuilder();
        builder.append(bakeHeader()).append("\n");
        for (PasteItem pasteItem : pasteItems) {
            try {
                builder.append(pasteItem.toHTML()).append("\n");
            } catch (Throwable e) {
                QuickShop.getInstance().logger().warn("Cannot render the paste item {}, skipping...", pasteItem.getClass().getName(), e);
                builder.append("<h3># ").append(pasteItem.getClass().getName()).append("</h3>")
                        .append("<br/>").append("Failed to render this paste item: <br/>").append(e.getMessage());
            }
        }
        builder.append(bakeFooter());
        return builder.toString();
    }

    @NotNull
    private String bakeHeader() {
        return DOCUMENT_HEADER
                .replace("{title}", "QuickShop-" + QuickShop.getInstance().getFork() + " // Paste")
                .replace("{inline_style}", INLINE_STYLE);
    }

    @NotNull
    private String bakeFooter() {
        return DOCUMENT_FOOTER
                .replace("{product}", "QuickShop-" + QuickShop.getInstance().getFork() + " v" + QuickShop.getInstance().getVersion())
                .replace("{time}", formatTime(timestamp))
                .replace("{pastecreator}", sender == null ? "Automatic" : sender.getName());
    }

    @NotNull
    private String formatTime(long time) {
        String timeUnit = QuickShop.getInstance().text().of("timeunit.std-format").legacy(MsgUtil.getDefaultGameLanguageCode());
        SimpleDateFormat format;
        try {
            format = new SimpleDateFormat(timeUnit);
        } catch (Exception e) {
            format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        }
        return format.format(time);
    }
}
